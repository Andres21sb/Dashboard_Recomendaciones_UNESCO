from dash import Dash, dcc, html, Input, Output, dash_table
import pandas as pd

#address where the csv is located
url = 'https://raw.githubusercontent.com/Keynell272/Prueba/main/Modelo%20coma.csv'

#create a data frame with the csv
data_frame = pd.read_csv(url, delimiter=',')

#columns to display in the table
excluded_columns = ['Pais', 'Nombre de la iniciativa', 'Descripción', 'Sitio web', 'Correo contacto']

#rest of columns (will be displayed in different dopdowns depending on the column value)
rest_columns = data_frame.columns[5:]

categories_dropdown = rest_columns[rest_columns.str.match(r'\d+')]
#add option 'Todas' to the dropdown
#categories_dropdown =categories_dropdown.tolist() + ['Todas']


#dropdown options for subcategory
subcategory_options = ['empty']


app = Dash(__name__)

app.layout = html.Div([
    html.H1(children='Tabla de Datos', style={'textAlign': 'center'}),

    html.Div([    
        dcc.Dropdown(
        id='column-dropdown',
        options=[{'label': col, 'value': col} for col in categories_dropdown],
        clearable=True,
        style={'width': '100%'}  
    ),

    dcc.Dropdown(
        id='subcategory-dropdown',
        options=[{'label': subcategory, 'value': subcategory} for subcategory in subcategory_options],
        clearable=True,  
        style={'width': '100%'}  
    )], 
    style={'textAlign': 'center', 'background-color': 'lightgrey', 'display':'flex', 'justify-content':'center'}),



    dash_table.DataTable(
        id='data-table',
        data=data_frame[excluded_columns].to_dict('records'),
        columns=[{'name': col, 'id': col} for col in excluded_columns],
        style_table={'height': '400px', 'overflowY': 'auto'},
        style_cell={'minWidth': '150px', 'width': '150px', 'maxWidth': '150px'},
        style_header={'fontWeight': 'bold', 'backgroundColor': 'lightgrey'},
    )
])

@app.callback(
    [Output('data-table', 'data'),
     Output('subcategory-dropdown', 'options')],
    Input('column-dropdown', 'value')
)
def update_table(selected_category):
    if not selected_category or selected_category == None:
        # Si no se ha seleccionado ninguna columna o se selecciona Todas, muestra todas las filas
        return data_frame[excluded_columns].to_dict('records'),['empty']

    filtered_df = data_frame[data_frame[selected_category] == selected_category]
    print('filtered_df : \n', filtered_df)

    # Obtiene las subcategorías de la columna seleccionada
    subcategory_options = get_subcategory_options(selected_category)

    return filtered_df[excluded_columns].to_dict('records'),subcategory_options

def get_subcategory_options(selected_category):
    print('selected_category : ', selected_category)
    match selected_category:
        case '1-Conocimiento científico abierto':
            return ['Producción científica', 'Datos abiertos de investigación', 'Recursos Educativos Abiertos',
                     'Programas informáticos de código abierto y código fuente abierto','Equipos informáticos de código abierto']	
        	
        case '2-Participación abierta de los agentes sociales ':
            return ['Ciencia Ciudadana', 'Financiación Colectiva', 'Producción Colectiva','Voluntariado Científico']
        
        case '3-Diálogos abiertos con otros sistemas de conocimiento':
            return ['Pueblos Indígenas', 'Investigadores Marginados', 'Comunidades Locales']
        		
        case '4-Infraestructuras de la ciencia abierta':
            return ['Virtuales', 'Fisicas']
        	
        case '5-DIMENSIONES NO UNESCO':
            return ['Evaluación abierta de la Ciencia', 'Innovación Abierta', 'Investigación abierta y reproducible']
        		
        case '6-Cuerpos Normativos':
            return ['Nacionales', 'Institucionales']
        	
        case '7-OBJETIVOS UNESCO':
            return ['A', 'B', 'C','D','E','F']

    return ['empty']

if __name__ == '__main__':
    app.run_server(debug=True)
